TaskFailedException

    nested task error: LinearAlgebra.SingularException(18)
    Stacktrace:
      [1] checknonsingular
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/factorization.jl:69 [inlined]
      [2] _check_lu_success
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:84 [inlined]
      [3] #lu!#182
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:92 [inlined]
      [4] lu!
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:90 [inlined]
      [5] lu!
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:89 [inlined]
      [6] _lu
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:347 [inlined]
      [7] lu(::Matrix{ComplexF64}; kwargs::@Kwargs{})
        @ LinearAlgebra /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:341
      [8] lu
        @ /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/lu.jl:341 [inlined]
      [9] \(A::Matrix{ComplexF64}, B::Matrix{Float64})
        @ LinearAlgebra /opt/hostedtoolcache/julia/1.11.2/x64/share/julia/stdlib/v1.11/LinearAlgebra/src/generic.jl:1132
     [10] eigen(M::Matrix{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}})
        @ Neuroblox ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:66
     [11] transferfunction(freq::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, derivatives::Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, params::Vector{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}}, indices::Dict{Symbol, Vector{Int64}})
        @ Neuroblox ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:116
     [12] csd_approx(freq::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, derivatives::Function, params::Vector{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}}, indices::Dict{Symbol, Vector{Int64}})
        @ Neuroblox ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:182
     [13] csd_mtf(freq::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, p::Int64, derivatives::Function, params::Vector{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}}, params_idx::Dict{Symbol, Vector{Int64}}, modality::String)
        @ Neuroblox ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:233
     [14] #52
        @ ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:426 [inlined]
     [15] chunk_mode_jacobian(f::Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, x::Vector{Float64}, cfg::ForwardDiff.JacobianConfig{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8, Vector{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}}})
        @ ForwardDiff ~/.julia/packages/ForwardDiff/UBbGT/src/jacobian.jl:187
     [16] jacobian
        @ ~/.julia/packages/ForwardDiff/UBbGT/src/jacobian.jl:24 [inlined]
     [17] jacobian(f::Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, x::Vector{Float64}, cfg::ForwardDiff.JacobianConfig{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8, Vector{ForwardDiff.Dual{ForwardDiff.Tag{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Float64}, Float64, 8}}})
        @ ForwardDiff ~/.julia/packages/ForwardDiff/UBbGT/src/jacobian.jl:19
     [18] jacobian(f::Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, x::Vector{Float64})
        @ ForwardDiff ~/.julia/packages/ForwardDiff/UBbGT/src/jacobian.jl:19
     [19] run_sDCM_iteration!(state::Neuroblox.VLState, setup::Neuroblox.VLSetup{Neuroblox.var"#52#54"{Dict{Symbol, Vector{Int64}}, String, Neuroblox.var"#51#53"{ModelingToolkit.ODESystem, Vector{Float64}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:ˍ₋arg1, :ˍ₋arg2, :t), Symbolics.var"#_RGF_ModTag", Symbolics.var"#_RGF_ModTag", (0xddb4b557, 0x728ee2e3, 0x8915193d, 0x4309e5d2, 0x09b58774), Expr}}, Int64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Array{ComplexF64, 3}, Matrix{ComplexF64}})
        @ Neuroblox ~/.julia/packages/Neuroblox/uguZs/src/datafitting/spDCM_VL.jl:470
     [20] (::Main.FD_SANDBOX_2630177278844153205.var"#1#2")()
        @ Main.FD_SANDBOX_2630177278844153205 ./none:4
